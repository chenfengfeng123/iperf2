.TH IPERF 1 "APRIL 2008" NLANR/DAST "User Manuals"
.SH NAME
iperf \- perform network throughput tests
.SH SYNOPSIS
.BI "iperf -s [" options ]

.BI "iperf -c " server " [" options ]

.BI "iperf -u -s [" options ]

.BI "iperf -u -c "  server " [" options ]

.SH DESCRIPTION
.LP
iperf 2 is a tool for performing network throughput and latency measurements.  It can test
useing either TCP or UDP protocols. It supports both unidirectional and bidirectional
traffic. Multiple simultaneous traffic streams are also supported. Metrics are displayed to
help isolate the causes which impact performance. Setting the enhanced (-e) option provides all
availble metrics.
.LP
The user must establish both a both a server (to discard traffic)
and a client (to generate traffic) for a test to occur. The client and server
typically are on different hosts or computers but need not be.
.SH "GENERAL OPTIONS"
.TP
.BR -b ", " --bandwidth " "
set the target bandwidth and optional standard devation per
\fI<mean>\fR,\fI[<stdev>]\fR (See NOTES for suffixes)
.TP
.BR -e ", " --enhanced " "
Display enhanced output in reports otherwise use legacy report (ver
2.0.5) formatting (see notes)
.TP
.BR -f ", " --format " " [abkmgBKMG]
format to report: adaptive, bits, Bytes, Kbits, Mbits, Gbits, KBytes,
MBytes, GBytes (see NOTES for more)
.TP
.BR -h ", " --help " "
print a help synopsis
.TP
.BR -i ", " --interval " < \fIn\fR[p] | f >"
sample or display interval reports every \fIn\fR seconds (default) or \fIn\fR packets (per optional p suffix.) If f is used then the interval will be each frame or burst.
.TP
.BR -l ", " --len " \fIn\fR[kmKM]"
set read/write buffer size (TCP) or length (UDP) to \fIn\fR (TCP default 128K, UDP default 1470)
.TP
.BR "    --l2checks "
perform layer 2 length checks on received UDP packets (requires systems that support packet sockets, e.g. Linux)
.TP
.BR -m ", " --print_mss " "
print TCP maximum segment size (MTU - TCP/IP header)
.TP
.BR "    --NUM_REPORT_STRUCTS " \fI<count>\fR
Override the default shared memory size between the traffic thread(s) and reporter thread in order to mitigate mutex lock contentions.  The default value of 5000 should be sufficient for 1Gb/s networks. Increase this upon seeing the WARNing message of reporter thread too slow. If the WARNing message isn't seen, then increasing this won't have any significant effect (other than to use some additional memory.)
.TP
.BR -o ", " --output " \fIfilename\fR"
output the report or error message to this specified file
.TP
.BR -p ", " --port " \fIn\fR"
set server port to listen on/connect to to \fIn\fR (default 5001)
.TP
.BR "    --sum-only "
set the output to sum reports only. Useful for -P at large values
.TP
.BR -u ", " --udp " "
use UDP rather than TCP
.TP
.BR -w ", " --window " \fIn\fR[kmKM]"
TCP window size (socket buffer size)
.TP
.BR -z ", " --realtime " "
Request real-time scheduler, if supported.
.TP
.BR -B ", " --bind " \fIhost\fR[:\fIport\fR][%\fIdev\fR]"
bind to \fIhost\fR, ip address or multicast address, optional port or device (see NOTES)
.TP
.BR -C ", " --compatibility " "
for use with older versions does not sent extra msgs
.TP
.BR -M ", " --mss " \fIn\fR"
set TCP maximum segment size (MTU - 40 bytes)
.TP
.BR -N ", " --nodelay " "
set TCP no delay, disabling Nagle's Algorithm
.TP
.BR -v ", " --version " "
print version information and quit
.TP
.BR -x ", " --reportexclude " [CDMSV]"
exclude C(connection) D(data) M(multicast) S(settings) V(server) reports
.TP
.BR -y ", " --reportstyle " C|c"
if set to C or c report results as CSV (comma separated values)
.TP
.BR -Z ", " --tcp-congestion " "
Set the default congestion-control algorithm to be used for new connections. Platforms must support setsockopt's TCP_CONGESTION. (Notes: See sysctl and tcp_allowed_congestion_control for available options. May require root privileges.)
.SH "SERVER SPECIFIC OPTIONS"
.TP
.BR -1 ", " --singleclient " "
set the server to process only one client at a time
.TP
.BR -b ", " --bandwidth " \fIn\fR[kmgKMG]"
set target read rate to \fIn\fR bits/sec. TCP only for the server.
.TP
.BR "    --bidir"
run a full duplex test, i.e. traffic in both transmit and receive directions using the same socket
.TP
.BR -s ", " --server " "
run in server mode
.TP
.BR "    --histograms[="\fIbinwidth\fR[u],\fIbincount\fR,[\fIlowerci\fR],[\fIupperci\fR] "]"
enable latency histograms for packets with -u (UDP) or for bursts and frames with --trip-times or --isochronous, bin width (default 1 millisecond, append u for microseconds,) bincount is total bins (default 1000), ci is confidence interval between 0-100% (default lower 5%, upper 95%, 3 stdev 99.7%)
.TP
.BR -B ", " --bind " \fIip\fR | \fIip\fR%\fIdevice\fR"
bind src ip addr and optional src device for receiving
.TP
.BR -D ", " --daemon " "
run the server as a daemon.  On Windows this will run the specified
command-line under the IPerfService, installing the service if
necessary.  Note the service is not configured to auto-start or
restart - if you need a self-starting service you will need to create
an init script or use Windows "sc" commands.
.TP
.BR -H ", " --ssm-host " \fIhost\fR"
Set the source host (ip addr) per SSM multicast, i.e. the S of the S,G
.TP
.BR -R ", " --remove " "
remove the IPerfService (Windows only).
.TP
.BR -U ", " --single_udp " "
run in single threaded UDP mode
.TP
.BR -V ", " --ipv6_domain " "
Enable IPv6 reception by setting the domain and socket to AF_INET6 (Can receive on both IPv4 and IPv6)
.SH "CLIENT SPECIFIC OPTIONS"
.TP
.BR -b ", " --bandwidth " \fIn\fR[kmgKMG] | \fIn\fRpps"
set target bandwidth to \fIn\fR bits/sec (default 1 Mbit/sec) or
\fIn\fR packets per sec.  This may be used with TCP or UDP.  For variable loads use format mean,standard deviation
.TP
.BR -c ", " --client " \fI\fIhost\fR | \fIhost\fR%\fIdevice\fR"
run in client mode, connecting to \fIhost\fR  where the optional %dev will SO_BINDTODEVICE that output interface (requires root and see NOTES)
.TP
.BR "    --connect-only"
only perform a TCP connect without any data transfer - useful to measure TCP connect() times
.TP
.BR -d ", " --dualtest " "
Do a bidirectional test simultaneously using legacy techniques. Suggest to use --bidir instead
.TP
.BR "    --fq-rate n[kmgKMG]"
Set a rate to be used with fair-queueing based socket-level pacing, in bytes or bits per second. Only available on platforms supporting the SO_MAX_PACING_RATE socket option. (Note: Here the suffixes indicate bytes/sec or bits/sec per use of uppercase or lowercase, respectively)
.TP
.BR "    --incr-dstip"
increment the destination ip address when using the parallel (-P) option
.TP
.BR "    --ipg "\fIn\fR
set the interpacket gap to \fIn\fR (units of milliseconds) for packets within an isochronous frame (burst), requires --isochronous
.TP
.BR "    --isochronous[=" \fIfps\fR:\fImean\fR,\fIstdev\fR "]"
send isochronous traffic with frequency frames per second and load defined by mean and standard deviation using a log normal distribution, defaults to 60:20m,0.  (Note: Here the suffixes indicate bytes/sec or bits/sec per use of uppercase or lowercase, respectively.  Also the p suffix is supported to set the burst size in packets, e.g. isochronous=2:25p will send two 25 packet bursts every second, or one 25 packet burst every 0.5 seconds.)
.TP
.BR "    --no-connect-sync "
By default, parallel traffic threads (per -P greater than 1) will synchronize after their TCP connects and prior to each sending traffic, i.e. all the threads first complete (or error) the TCP 3WHS before any traffic thread will start sending.  This option disables that sychronization such that each traffic thread will start sending immediately after completing its successful connect.
.TP
.BR "    --no-udp-fin "
Don't perform the UDP final server to client exchange which means there won't be a final server report displayed on the client. All packets per the test will be from the client to the server and no packets should be sent in the other direction (This option is set on the client and passed to the server requiring ver 2.0.14 or better)
.TP
.BR -n ", " --num " \fIn\fR[kmKM]"
number of bytes to transmit (instead of -t)
.TP
.BR -r ", " --tradeoff " "
Do a bidirectional test individually - client-to-server, followed by
a reversed test, server-to-client
.TP
.BR -t ", " --time " \fIn\fR"
time in seconds to listen for new traffic connections, receive traffic or transmit traffic (Defaults: transmit is 10 secs while listen and receive are indefinite)
.TP
.BR "    --trip-times "
enable the measurement of end to end write to read latencies (client and server clocks must be synchronized)
.TP
.BR "    --txdelay-time "
time in seconds to hold back or delay after the TCP connect and prior to the socket writes.  For UDP it's the delay between the traffic thread starting and the first write.
.TP
.BR "    --txstart-time "\fIn\fR.\fIn\fR
set the txstart-time to \fIn\fR.\fIn\fR using unix or epoch time format (supports nanonsecond resolution, e.g 1536014418.839992457)
.TP
.BR -B ", " --bind " \fIip\fR | \fIip\fR:\fIport\fR | \fIipv6 -V\fR | \fI[ipv6]\fR:\fIport -V\fR"
bind src ip addr and optional port as the source of traffic (see notes)
.TP
.BR -F ", " --fileinput " \fIname\fR"
input the data to be transmitted from a file
.TP
.BR -I ", " --stdin " "
input the data to be transmitted from stdin
.TP
.BR -L ", " --listenport " \fIn\fR"
port to recieve bidirectional tests back on
.TP
.BR -P ", " --parallel " \fIn\fR"
number of parallel client threads to run
.TP
.BR -R ", " --reverse " "
reverse the traffic flow (useful for testing through firewalls, see NOTES)
.TP
.BR -S ", " --tos " "
set the socket's IP_TOS (byte) field
.TP
.BR -T ", " --ttl " \fIn\fR"
time-to-live, for multicast (default 1)
.BR -V ", " --ipv6_domain " "
Set the domain to IPv6 (send packets over IPv6)
.TP
.BR -X ", " --peerdetect " "
run peer version detection prior to traffic.
.TP
.BR -Z ", " --linux-congestion " \fIalgo\fR"
set TCP congestion control algorithm (Linux only)
.SH EXAMPLES

.B TCP tests (client)

.B iperf -c <host> -e -i 1
.br
------------------------------------------------------------
.br
Client connecting to <host>, TCP port 5001 with pid 5149
.br
Write buffer size:  128 KByte
.br
TCP window size:  340 KByte (default)
.br
------------------------------------------------------------
.br
[  3] local 45.56.85.133 port 49960 connected with 45.33.58.123 port 5001 (ct=3.23 ms)
.br
[ ID] Interval        Transfer    Bandwidth       Write/Err  Rtry     Cwnd/RTT        NetPwr
.br
[  3] 0.00-1.00 sec   126 MBytes  1.05 Gbits/sec  1006/0          0       56K/626 us  210636.47
.br
[  3] 1.00-2.00 sec   138 MBytes  1.15 Gbits/sec  1100/0        299      483K/3884 us  37121.32
.br
[  3] 2.00-3.00 sec   137 MBytes  1.15 Gbits/sec  1093/0         24      657K/5087 us  28162.31
.br
[  3] 3.00-4.00 sec   126 MBytes  1.06 Gbits/sec  1010/0        284      294K/2528 us  52366.58
.br
[  3] 4.00-5.00 sec   117 MBytes   980 Mbits/sec  935/0        373      487K/2025 us  60519.66
.br
[  3] 5.00-6.00 sec   144 MBytes  1.20 Gbits/sec  1149/0          2      644K/3570 us  42185.36
.br
[  3] 6.00-7.00 sec   126 MBytes  1.06 Gbits/sec  1011/0        112      582K/5281 us  25092.56
.br
[  3] 7.00-8.00 sec   110 MBytes   922 Mbits/sec  879/0         56      279K/1957 us  58871.89
.br
[  3] 8.00-9.00 sec   127 MBytes  1.06 Gbits/sec  1014/0         46      483K/3372 us  39414.89
.br
[  3] 9.00-10.00 sec   132 MBytes  1.11 Gbits/sec  1054/0          0      654K/3380 us  40872.75
.br
[  3] 0.00-10.00 sec  1.25 GBytes  1.07 Gbits/sec  10251/0       1196       -1K/3170 us  42382.03

.TP
.B where (per -e,)
.B ct=
TCP connect time (or three way handshake time 3WHS)
.br
.B Write/Err
Total number of successful socket writes. Total number of non-fatal socket write errors
.br
.B Rtry
Total number of TCP retries
.br
.B Cwnd/RTT (*nix only)
TCP congestion window and round trip time (sampled where NA indicates no value)
.br
.B NetPwr (*nix only)
Network power defined as (throughput / RTT)

.PP

.B TCP tests (server)

.B
iperf -s -e -i 1 -l 8K
.br
------------------------------------------------------------
.br
Server listening on TCP port 5001 with pid 13430
.br
Read buffer size: 8.00 KByte
.br
TCP window size: 85.3 KByte (default)
.br
------------------------------------------------------------
.br
[  4] local 45.33.58.123 port 5001 connected with 45.56.85.133 port 49960
.br
[ ID] Interval        Transfer    Bandwidth       Reads   Dist(bin=1.0K)
.br
[  4] 0.00-1.00 sec   124 MBytes  1.04 Gbits/sec  22249    798:2637:2061:767:2165:1563:589:11669
.br
[  4] 1.00-2.00 sec   136 MBytes  1.14 Gbits/sec  24780    946:3227:2227:790:2427:1888:641:12634
.br
[  4] 2.00-3.00 sec   137 MBytes  1.15 Gbits/sec  24484    1047:2686:2218:810:2195:1819:728:12981
.br
[  4] 3.00-4.00 sec   126 MBytes  1.06 Gbits/sec  20812    863:1353:1546:614:1712:1298:547:12879
.br
[  4] 4.00-5.00 sec   117 MBytes   984 Mbits/sec  20266    769:1886:1828:589:1866:1350:476:11502
.br
[  4] 5.00-6.00 sec   143 MBytes  1.20 Gbits/sec  24603    1066:1925:2139:822:2237:1827:744:13843
.br
[  4] 6.00-7.00 sec   126 MBytes  1.06 Gbits/sec  22635    834:2464:2249:724:2269:1646:608:11841
.br
[  4] 7.00-8.00 sec   110 MBytes   921 Mbits/sec  21107    842:2437:2747:592:2871:1903:496:9219
.br
[  4] 8.00-9.00 sec   126 MBytes  1.06 Gbits/sec  22804    1038:1784:2639:656:2738:1927:573:11449
.br
[  4] 9.00-10.00 sec   133 MBytes  1.11 Gbits/sec  23091    1088:1654:2105:710:2333:1928:723:12550
.br
[  4] 0.00-10.02 sec  1.25 GBytes  1.07 Gbits/sec  227306    9316:22088:21792:7096:22893:17193:6138:120790
.br
.TP
.B where (per -e,)
.B Reads
Total number of socket reads
.br
.B Dist(bin=size)
Eight bin histogram of the socket reads returned byte count.  Bin
width is set per size.  Bins are separated by a colon.  In the
example, the bins are 0-1K, 1K-2K, .., 7K-8K.

.PP

.B TCP tests (server with --trip-times on client)

.B
iperf -s -i 1 -w 4M  and client enables trip-times (e.g. iperf -c 192.168.1.4 --trip-times)
.br
------------------------------------------------------------
.br
Server listening on TCP port 5001
.br
TCP window size: 8.00 MByte (WARNING: requested 4.00 MByte)
.br
------------------------------------------------------------
.br
[  4] local 192.168.1.4 port 5001 connected with 192.168.1.1 port 41148 (WARN: winsize=8.00 MByte req=4.00 MByte) (trip-times) (0.0)
.br
[ ID] Interval        Transfer    Bandwidth       Reads   Dist(bin=16.0K)     Burst Latency avg/min/max/stdev (cnt/size) inP NetPwr
.br
[  4] 0.00-1.00 sec  39.5 MBytes   331 Mbits/sec  1202    363:239:200:303:82:10:5:0    45.903/ 6.960/114.098/14.906 ms (315/131455) 1.93 MByte 902.10
.br
[  4] 1.00-2.00 sec  41.2 MBytes   346 Mbits/sec  1243    366:225:244:315:82:8:3:0    43.851/ 4.879/66.138/13.416 ms (330/131067) 1.76 MByte 986.35
.br
[  4] 2.00-3.00 sec  41.3 MBytes   346 Mbits/sec  1239    351:235:243:324:67:12:6:1    47.392/15.661/66.540/11.228 ms (331/130718) 2.00 MByte 912.98
.br
[  4] 3.00-4.00 sec  41.5 MBytes   348 Mbits/sec  1263    375:234:239:330:75:7:2:1    46.354/ 5.241/67.501/13.129 ms (331/131329) 1.89 MByte 937.78
.br
[  4] 4.00-5.00 sec  41.2 MBytes   346 Mbits/sec  1258    360:274:227:291:93:11:2:0    46.873/11.738/66.749/11.404 ms (330/131052) 1.93 MByte 922.65
.br
[  4] 5.00-6.00 sec  41.2 MBytes   346 Mbits/sec  1260    384:242:207:325:89:8:4:1    43.894/ 5.754/71.663/14.187 ms (330/131026) 1.75 MByte 985.08
.br
[  4] 6.00-7.00 sec  40.8 MBytes   342 Mbits/sec  1239    365:230:228:339:68:6:3:0    45.442/ 7.337/85.551/14.247 ms (326/131104) 1.95 MByte 940.53
.br
[  4] 7.00-8.00 sec  40.9 MBytes   343 Mbits/sec  1253    399:218:228:301:91:15:1:0    46.583/ 5.054/80.795/12.346 ms (327/131127) 1.89 MByte 920.47
.br
[  4] 8.00-9.00 sec  40.7 MBytes   341 Mbits/sec  1238    366:243:228:311:75:9:5:1    46.426/ 6.881/84.161/13.552 ms (326/130835) 1.90 MByte 918.71
.br
[  4] 9.00-10.00 sec  41.3 MBytes   347 Mbits/sec  1258    377:251:222:314:75:10:9:0    45.013/ 7.351/71.681/13.149 ms (330/131280) 1.84 MByte 962.45
.br
[  4] 10.00-10.04 sec  1.54 MBytes   333 Mbits/sec  47    14:8:7:14:4:0:0:0    57.046/43.117/62.784/ 6.215 ms (13/124423) 3.98 MByte 729.76
.br
[  4] 0.00-10.04 sec   411 MBytes   344 Mbits/sec  12500    3720:2399:2273:3167:801:96:40:4    45.678/62.784/62.784/ 0.000 ms (3289/131072) 1.88 MByte 940.12
.TP
.B where (per -e,)
.B Burst Latency
One way TCP write() to read() latency in mean/minimum/maximum/standard deviation format
(Note: requires the client's and server's system clocks to be
synchronized to a common reference, e.g. using precision time protocol
PTP.  A GPS disciplined OCXO is a recommended reference.)
.br
.B cnt
Number of completed bursts received and used for the burst latency calculations
.br
.B size
Average burst size in bytes (computed average and estimate only)
.br
.B inP
inP, short for in progress, is the average number of bytes in progress or in flight. This is taken from an application write to read perspective. (Requires --trip-times on client. See Little's law in NOTES.)
.br
.B NetPwr
Network power defined as (throughput / one way latency)

.PP

.B UDP tests (client)

.B iperf -c <host> -e -i 1 -u -b 10m
.br
------------------------------------------------------------
.br
Client connecting to <host>, UDP port 5001 with pid 5169
.br
Sending 1470 byte datagrams, IPG target: 1176.00 us (kalman adjust)
.br
UDP buffer size:  208 KByte (default)
.br
------------------------------------------------------------
.br
[  3] local 45.56.85.133 port 32943 connected with 45.33.58.123 port 5001
.br
[ ID] Interval        Transfer     Bandwidth      Write/Err  PPS
.br
[  3] 0.00-1.00 sec  1.19 MBytes  10.0 Mbits/sec  852/0      851 pps
.br
[  3] 1.00-2.00 sec  1.19 MBytes  10.0 Mbits/sec  850/0      850 pps
.br
[  3] 2.00-3.00 sec  1.19 MBytes  10.0 Mbits/sec  850/0      850 pps
.br
[  3] 3.00-4.00 sec  1.19 MBytes  10.0 Mbits/sec  851/0      850 pps
.br
[  3] 4.00-5.00 sec  1.19 MBytes  10.0 Mbits/sec  850/0      850 pps
.br
[  3] 5.00-6.00 sec  1.19 MBytes  10.0 Mbits/sec  850/0      850 pps
.br
[  3] 6.00-7.00 sec  1.19 MBytes  10.0 Mbits/sec  851/0      850 pps
.br
[  3] 7.00-8.00 sec  1.19 MBytes  10.0 Mbits/sec  850/0      850 pps
.br
[  3] 8.00-9.00 sec  1.19 MBytes  10.0 Mbits/sec  851/0      850 pps
.br
[  3] 0.00-10.00 sec  11.9 MBytes  10.0 Mbits/sec  8504/0      850 pps
.br
[  3] Sent 8504 datagrams
.br
[  3] Server Report:
.br
[  3] 0.00-10.00 sec  11.9 MBytes  10.0 Mbits/sec   0.047 ms    0/ 8504 (0%)  0.537/ 0.392/23.657/ 0.497 ms  850 pps  2329.37
.br
.TP
.B where (per -e,)
.B Write/Err
Total number of successful socket writes. Total number of non-fatal socket write errors
.br
.B PPS
Transmit packet rate in packets per second

.PP

.B UDP tests (server)
.B iperf -s -i 1 -w 4M -u
.br
------------------------------------------------------------
.br
Server listening on UDP port 5001
.br
Receiving 1470 byte datagrams
.br
UDP buffer size: 8.00 MByte (WARNING: requested 4.00 MByte)
.br
------------------------------------------------------------
.br
[  3] local 192.168.1.4 port 5001 connected with 192.168.1.1 port 60027 (WARN: winsize=8.00 MByte req=4.00 MByte) (trip-times) (0.0) (peer 2.0.14-alpha)
.br
[ ID] Interval        Transfer     Bandwidth        Jitter   Lost/Total  Latency avg/min/max/stdev PPS  inP NetPwr
.br
[  3] 0.00-1.00 sec  44.5 MBytes   373 Mbits/sec   0.071 ms 52198/83938 (62%) 75.185/ 2.367/85.189/14.430 ms 31854 pps 3.64 MByte 620.58
.br
[  3] 1.00-2.00 sec  44.8 MBytes   376 Mbits/sec   0.015 ms 59549/143701 (41%) 79.609/75.603/85.757/ 1.454 ms 31954 pps 3.56 MByte 590.04
.br
[  3] 2.00-3.00 sec  44.5 MBytes   373 Mbits/sec   0.017 ms 59494/202975 (29%) 80.006/75.951/88.198/ 1.638 ms 31733 pps 3.56 MByte 583.07
.br
[  3] 3.00-4.00 sec  44.5 MBytes   373 Mbits/sec   0.019 ms 59586/262562 (23%) 79.939/75.667/83.857/ 1.145 ms 31767 pps 3.56 MByte 583.57
.br
[  3] 4.00-5.00 sec  44.5 MBytes   373 Mbits/sec   0.081 ms 59612/322196 (19%) 79.882/75.400/86.618/ 1.666 ms 31755 pps 3.55 MByte 584.40
.br
[  3] 5.00-6.00 sec  44.7 MBytes   375 Mbits/sec   0.064 ms 59571/381918 (16%) 79.767/75.571/85.339/ 1.556 ms 31879 pps 3.56 MByte 588.02
.br
[  3] 6.00-7.00 sec  44.6 MBytes   374 Mbits/sec   0.041 ms 58990/440820 (13%) 79.722/75.662/85.938/ 1.087 ms 31820 pps 3.58 MByte 586.73
.br
[  3] 7.00-8.00 sec  44.7 MBytes   375 Mbits/sec   0.027 ms 59679/500548 (12%) 79.745/75.704/84.731/ 1.094 ms 31869 pps 3.55 MByte 587.46
.br
[  3] 8.00-9.00 sec  44.3 MBytes   371 Mbits/sec   0.078 ms 59230/559499 (11%) 80.346/75.514/94.293/ 2.858 ms 31590 pps 3.58 MByte 577.97
.br
[  3] 9.00-10.00 sec  44.4 MBytes   373 Mbits/sec   0.073 ms 58782/618394 (9.5%) 79.125/75.511/93.638/ 1.643 ms 31702 pps 3.55 MByte 588.99
.br
[  3] 10.00-10.08 sec  3.53 MBytes   367 Mbits/sec   0.129 ms 6026/595236 (1%) 94.967/80.709/99.685/ 3.560 ms 31107 pps 3.58 MByte 483.12
.br
[  3] 0.00-10.08 sec   449 MBytes   374 Mbits/sec   0.129 ms 592717/913046 (65%) 79.453/ 2.367/99.685/ 5.200 ms 31776 pps (null) 587.91
.br

.TP
.B where (per -e,)
.B Latency
End to end latency in mean/minimum/maximum/standard deviation format
(Note: requires the client's and server's system clocks to be
synchronized to a common reference, e.g. using precision time protocol
PTP.  A GPS disciplined OCXO is a recommended reference.)
.br
.B PPS
Received packet rate in packets per second
.br
.B inP
inP, short for in progress, is the average number of bytes in progress or in flight. This is taken from an application write to read perspective. (Requires --trip-times on client. See Little's law in NOTES.)
.br
.B NetPwr
Network power defined as (throughput / latency)

.PP

.B Isochronous UDP tests (client)

.B iperf -c 192.168.100.33 -u -e -i 1 --isochronous=60:100m,10m --realtime
.br
------------------------------------------------------------
.br
Client connecting to 192.168.100.33, UDP port 5001 with pid 14971
.br
UDP isochronous: 60 frames/sec mean= 100 Mbit/s, stddev=10.0 Mbit/s, Period/IPG=16.67/0.005 ms
.br
UDP buffer size:  208 KByte (default)
.br
------------------------------------------------------------
.br
[  3] local 192.168.100.76 port 42928 connected with 192.168.100.33 port 5001
.br
[ ID] Interval        Transfer     Bandwidth      Write/Err  PPS  frames:tx/missed/slips
.br
[  3] 0.00-1.00 sec  12.0 MBytes   101 Mbits/sec  8615/0     8493 pps   62/0/0
.br
[  3] 1.00-2.00 sec  12.0 MBytes   100 Mbits/sec  8556/0     8557 pps   60/0/0
.br
[  3] 2.00-3.00 sec  12.0 MBytes   101 Mbits/sec  8586/0     8586 pps   60/0/0
.br
[  3] 3.00-4.00 sec  12.1 MBytes   102 Mbits/sec  8687/0     8687 pps   60/0/0
.br
[  3] 4.00-5.00 sec  11.8 MBytes  99.2 Mbits/sec  8468/0     8468 pps   60/0/0
.br
[  3] 5.00-6.00 sec  11.9 MBytes  99.8 Mbits/sec  8519/0     8520 pps   60/0/0
.br
[  3] 6.00-7.00 sec  12.1 MBytes   102 Mbits/sec  8694/0     8694 pps   60/0/0
.br
[  3] 7.00-8.00 sec  12.1 MBytes   102 Mbits/sec  8692/0     8692 pps   60/0/0
.br
[  3] 8.00-9.00 sec  11.9 MBytes   100 Mbits/sec  8537/0     8537 pps   60/0/0
.br
[  3] 9.00-10.00 sec  11.8 MBytes  99.0 Mbits/sec  8450/0     8450 pps   60/0/0
.br
[  3] 0.00-10.01 sec   120 MBytes   100 Mbits/sec  85867/0     8574 pps  602/0/0
.br
[  3] Sent 85867 datagrams
.br
[  3] Server Report:
.br
[  3] 0.00-9.98 sec   120 MBytes   101 Mbits/sec   0.009 ms  196/85867 (0.23%)  0.665/ 0.083/ 1.318/ 0.174 ms 8605 pps  18903.85
.br
.TP
.B where (per -e,)
.B frames:tx/missed/slips
Total number of isochronous frames or bursts. Total number of frame ids not sent.  Total number of frame slips

.PP

.B Isochronous UDP tests (server)

.B iperf -s -e -u --udp-histogram=100u,2000 --realtime
.br
------------------------------------------------------------
.br
Server listening on UDP port 5001 with pid 5175
.br
Receiving 1470 byte datagrams
.br
UDP buffer size:  208 KByte (default)
.br
------------------------------------------------------------
.br
[  3] local 192.168.100.33 port 5001 connected with 192.168.100.76 port 42928 isoch (peer 2.0.13-alpha)
.br
[ ID] Interval        Transfer     Bandwidth        Jitter   Lost/Total  Latency avg/min/max/stdev PPS  NetPwr  Frames/Lost
.br
[  3] 0.00-9.98 sec   120 MBytes   101 Mbits/sec   0.010 ms  196/85867 (0.23%)  0.665/ 0.083/ 1.318/ 0.284 ms 8585 pps  18903.85  601/1
.br
[  3] 0.00-9.98 sec T8(f)-PDF: bin(w=100us):cnt(85671)=1:2,2:844,3:10034,4:8493,5:8967,6:8733,7:8823,8:9023,9:8901,10:8816,11:7730,12:4563,13:741,14:1 (5.00/95.00%=3/12,Outliers=0,obl/obu=0/0)
.br
[  3] 0.00-9.98 sec F8(f)-PDF: bin(w=100us):cnt(598)=15:2,16:1,17:27,18:68,19:125,20:136,21:103,22:83,23:22,24:23,25:5,26:3 (5.00/95.00%=17/24,Outliers=0,obl/obu=0/0)

.TP
.B where,
.B Frames/lost
Total number of frames (or bursts) received.  Total number of bursts lost or errored
.br
.B
T8-PDF(f)
Latency histogram for packets
.br
.B F8-PDF(f)
Latency histogram for frames


.SH ENVIRONMENT
.TP
.B
Note:
The environment variable option settings haven't been maintained well.
See the source code if these are of interest.
.RE
.SH NOTES
Some numeric options support format characters per '<value>\fIc\fR'
(e.g. 10M) where the \fIc\fR format characters are k,m,g,K,M,G.
Lowercase format characters are 10^3 based and uppercase are 2^n
based, e.g. 1k = 1000, 1K = 1024, 1m = 1,000,000 and 1M = 1,048,576
.P
The -b option supports variable offered loads through the
<mean>,<standard deviation> format, e.g. -b 100m,10m on the client.
The distribution used is log normal.  Similar for the isochronous
option.
.P
The -e or --enhanced latency output on the UDP servers assumes the
clients' and servers' system clocks are synchronized.  Network Time
Protocol (NTP) or Precision Time Protocol (PTP) are commonly used for
this.  The reference clock(s) or oscillator's error will also affect
the accuracy of UDP latency measurements.
.P
Binding is done via the -B for logical level and the percent (%) for device level
on both the client and server. On the client, the -B option affects the bind() system
call, and will set the source ip addresss and the source port, e.g. iperf -c <host>
-B 192.168.100.2:6002. This controls the packet's source values but not routing.
These can be confusing in that a route or device lookup may not
be that of the device with the configured source IP.
So, for example, if the IP address of eth0 is used for -B and the
routing table for the destination IP address resolves
the ouput interface to be eth1, then the host will send the packet
out device eth1 while using the source IP address of eth0 in the packet.
To affect the physical output interface (e.g. dual homed systems) either use
-c <host>%<dev> (requires root) and bypasses this host route table lookup,
or configure policy routing per each -B source address and set the
output interface there in the policy routes. On the server or receive,
only packets destined to -B IP address will be received. It's also useful
for multicast. For example, iperf -s -B 224.0.0.1%eth0 will receive ip
multicast address received on eth0.  Finally, the device specifier is required
for v6 link-local, e.g. -c [v6addr]%dev -V, to select the output interface.
.P
The --reverse (-R), -r and -d are confusing.  \fBIf you want to test through
a NAT firewall, use --reverse\fR (or -R on non-windows systems).  The latter two
of -d and -r remain supported for mostly compatibility reasons.  These open
new sockets vs treat the originating socket as full duplex.  Firewall
configuration is typically required to use -d and -r if a NAT gateway is
in the path. Also, the --reverse -b <rate> setting is a bit different.  For
TCP it will rate limit the read side, i.e. the iperf client reading
from the full duplex socket.  This will in turn flow control the reverse
traffic per standard TCP congestion control.  The --reverse -b <rate> must
be applied on the transmit (i.e. the reverse server) for UDP since
there is no flow control with UDP.
.P
The TCP connect time (or three way handshake) can be seen on the iperf
client when the -e (--enhancedreports) option is set. Look for the
ct=<value> in the connected message, e.g.in '[ 3] local 192.168.1.4
port 48736 connected with 192.168.1.1 port 5001 \fB(ct=1.84 ms)\fR'
shows the 3WHS took 1.84 milliseconds.
.P
\fBLittle's Law\fR in queueing theory is a theorem that determines the average number of items (L) in a stationary queuing system based on the average waiting time (W) of an item within a system and the average number of items arriving at the system per unit of time (lambda). Mathematically, it's L = lambda * W. As used here, the units are bytes. The arrival rate is the taken from the writes.
.P
The network power (NetPwr) metric is \fBexperimental\fR.  It's a
convenience function defined as throughput/delay.  For TCP, the delay
is the sampled RTT times.  For UDP the delay is the end/end latency.
Don't confuse this with the physics definition of power (delta
energy/delta time) but more of a measure of a desireable property
divided by an undesireable property.  Also note, one must use -i
interval with TCP to get this as that's what sets the RTT sampling
rate.  The metric is scaled to assist with human readability.  (Note:
if this metric goes beyond the experimental state we'll consider a
supporting and RTT sampling rate independent of the -i interval.)
.P
Use
.B ./configure --enable-fastsampling
and then compile from source to enable four digit (e.g. 1.0000) precision in reports' timestamps. Useful for sub-millisecond sampling.
.SH DIAGNOSTICS
Use
.B ./configure --enable-thread-debug
and then compile from source to enable both asserts and advanced debugging of the tool itself.
.SH BUGS
See https://sourceforge.net/p/iperf2/tickets/
.SH AUTHORS
Iperf2, based from iperf (originally written by Mark Gates and Alex
Warshavsky), has a goal of maintainence with some feature enhancement.
Other contributions from Ajay Tirumala, Jim Ferguson, Jon Dugan <jdugan at x1024 dot net>,
Feng Qin,
Kevin Gibbs,
John Estabrook <jestabro at ncsa.uiuc.edu>,
Andrew Gallatin <gallatin at gmail.com>,
Stephen Hemminger <shemminger at linux-foundation.org>,
Tim Auckland <tim.auckland at gmail.com>,
Robert J. McMahon <rjmcmahon at rjmcmahon.com>
.SH "SEE ALSO"
.BR accept (2),  bind (2),  close (2), connect (2),  fcntl (2),  getpeername (2),  getsockname (2),  getsockopt (2),  listen (2),  read (2),  recv (2),  select (2),  send (2),  setsockopt (2),  shutdown (2),  write (2),  ip (7),  socket (7),  tcp (7),  udp (7)
.LP
Source code at http://sourceforge.net/projects/iperf2/
.LP
"Unix Network Programming, Volume 1: The Sockets Networking API (3rd Edition) 3rd Edition"
by W. Richard Stevens (Author), Bill Fenner (Author), Andrew M. Rudoff (Author)
